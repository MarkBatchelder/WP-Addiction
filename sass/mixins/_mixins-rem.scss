/* The mixin relies on a baseline of 10px (font-size: 62.5%) */

@function parseInt($n) { /* The mixin relies on a function to parse the integer from a value with a unit */
	@return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
	$px : (); /* We define a list of values for both units */
	$rem: (); /* We define a list of values for both units */
	
	@each $value in $values { /* We iterate through each value in the given parameter $values */
	
		@if $value == 0 or $value == auto { /* If the value is either auto or 0, we append it to the list as-is */
			$px : append($px , $value);
			$rem: append($rem, $value);
		}
		
		@else { 
			$unit: unit($value);    /* If the value has a unit, we split it to get both the unit and the raw value */
			$val: parseInt($value); /* If the value has a unit, we split it to get both the unit and the raw value */
			
			@if $unit == "px" {  /* We append according values to the lists depending on the unit of the given value */
				$px : append($px,  $value);
				$rem: append($rem, ($val / 10 + rem));
			}
			
			@if $unit == "rem" { /* We append according values to the lists depending on the unit of the given value */
				$px : append($px,  ($val * 10 + px));
				$rem: append($rem, $value);
			}
		}
	}
	
	@if $px == $rem {     /* If the two lists are the same, we ouput only one (like margin-top: 0) */
		#{$property}: $px;  /* We output the result */
	} @else {
		#{$property}: $px;  /* We output the result */
		#{$property}: $rem; /* We output the result */
	}
}